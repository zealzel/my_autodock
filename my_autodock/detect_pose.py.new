import rclpy
from rclpy.node import Node
from apriltag_msgs.msg import AprilTagDetectionArray
from geometry_msgs.msg import PoseStamped
import tf2_ros
import tf2_geometry_msgs
from tf2_ros import TransformException, ConnectivityException, ExtrapolationException


class DockPosePublisher(Node):
    def __init__(self):
        super().__init__("dock_pose_publisher")
        self.get_logger().info("DockPosePublisher started.")

        # Initialize tf2 buffer and listener
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self)

        self.subscription = self.create_subscription(
            AprilTagDetectionArray, "apriltag_detections", self.detection_callback, 10
        )
        self.publisher = self.create_publisher(PoseStamped, "detected_dock_pose", 10)
        self.use_first_detection = (
            self.declare_parameter("use_first_detection", False)
            .get_parameter_value()
            .bool_value
        )
        self.dock_tag_family = (
            self.declare_parameter("dock_tag_family", "tag36h11")
            .get_parameter_value()
            .string_value
        )
        self.dock_tag_id = (
            self.declare_parameter("dock_tag_id", 30)
            .get_parameter_value()
            .integer_value
        )

    def detection_callback(self, msg):
        for detection in msg.detections:
            if self.use_first_detection or (detection.id == self.dock_tag_id):
                pose = PoseStamped()
                pose.header = msg.header
                pose.pose = detection.pose.pose.pose
                try:
                    # Lookup the transform from base_link to camera_depth_link
                    base_to_camera_transform = self.tf_buffer.lookup_transform(
                        "base_link",
                        pose.header.frame_id,
                        pose.header.stamp,
                        rclpy.duration.Duration(seconds=1.0),
                    )

                    # Apply the transform to get the pose in the base_link frame
                    transformed_pose = tf2_geometry_msgs.do_transform_pose_stamped(
                        pose, base_to_camera_transform
                    )

                    # Publish the transformed pose
                    self.publisher.publish(transformed_pose)
                except (
                    TransformException,
                    ConnectivityException,
                    ExtrapolationException,
                ) as e:
                    self.get_logger().warn(f"Transform lookup failed: {e}")
                return


def main(args=None):
    rclpy.init(args=args)
    dock_pose_publisher = DockPosePublisher()
    rclpy.spin(dock_pose_publisher)
    dock_pose_publisher.destroy_node()
    rclpy.shutdown()


if __name__ == "__main__":
    main()
